name: Android CI

on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: base64-to-file
        id: write_file
        uses: timheuer/base64-to-file@v1.2
        if: ${{ ( github.event_name != 'pull_request' && github.ref == 'refs/heads/master' ) || github.ref_type == 'tag' }}
        with:
          fileName: 'key.jks'
          encodedString: ${{ secrets.SIGNING_KEY }}

      - name: Write key
        if: ${{ ( github.event_name != 'pull_request' && github.ref == 'refs/heads/master' ) || github.ref_type == 'tag' }}
        run: |
          touch keystore.properties
          echo storePassword='${{ secrets.KEY_STORE_PASSWORD }}' >> keystore.properties
          echo keyAlias='${{ secrets.ALIAS }}' >> keystore.properties
          echo keyPassword='${{ secrets.KEY_PASSWORD }}' >> keystore.properties
          echo storeFile='${{ steps.write_file.outputs.filePath }}' >> keystore.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Cache gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            !~/.gradle/caches/build-cache-*
          key: gradle-deps-core-${{ hashFiles('**/build.gradle.kts') }}
          restore-keys: |
            gradle-deps

      - name: Install dep
        run: |
          sudo apt-get install -y ccache
          ccache -o max_size=1G
          ccache -o hash_dir=false
          ccache -o compiler_check='%compiler% -dumpmachine; %compiler% -dumpversion'
          ccache -zp

      - name: Build with Gradle
        run: |
          [ $(du -s ~/.gradle/wrapper | awk '{ print $1 }') -gt 250000 ] && rm -rf ~/.gradle/wrapper/* || true
          find ~/.gradle/caches -exec touch -d "2 days ago" {} + || true
          echo 'org.gradle.caching=true' >> gradle.properties
          echo 'org.gradle.parallel=true' >> gradle.properties
          echo 'org.gradle.vfs.watch=true' >> gradle.properties
          echo 'org.gradle.jvmargs=-Xmx2048m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8 -XX:+UseParallelGC -XX:MaxMetaspaceSize=1g' >> gradle.properties
          echo 'android.native.buildOutput=verbose' >> gradle.properties
          chmod +x gradlew
          ./gradlew assembleRelease -Pkotlin.experimental.tryK2=true
          ccache -s

      - name: Upload assets to a Release
        uses: meeDamian/github-release@v2.0.3
        with:
          files: app/build/outputs/apk/release/*.apk
          token: ${{ secrets.RELEASE_TOKEN }}
          allow_override: true
          gzip: false

      - name: Get Latest Release Body
        id: get_latest_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.RELEASE_TOKEN }}
          script: |
            const latestRelease = await github.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            console.log(latestRelease.data.body);
            console.log(latestRelease.data.tag_name);
            core.setOutput("body", latestRelease.data.body);
            core.setOutput("tag_name", latestRelease.data.tag_name);

      - name: Telegram Notify
        uses: appleboy/telegram-action@v0.1.1
        with:
          token: ${{ secrets.BOT_TOKEN }}
          to: ${{ secrets.CHANGELOG_CHANNEL_ID }}
          message: |
            *${{ github.repository }}* new release *${{ steps.outputs.tag_name }}* is available
            ${{ steps.get_latest_release.outputs.body}}
          format: markdown
          document: app/build/outputs/apk/release/*.apk
